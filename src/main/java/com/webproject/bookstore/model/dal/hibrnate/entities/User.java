package com.webproject.bookstore.model.dal.hibrnate.entities;
// Generated Mar 22, 2019 5:44:23 PM by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="user"
    ,catalog="bookstoredb"
)
public class User  implements java.io.Serializable {


     private int userId;
     private String name;
     private Date birthDate;
     private String password;
     private String job;
     private String email;
     private double creditLimit;
     private String address;
     private String phone;
     private String gender;
     private Set<UserVisitBook> userVisitBooks = new HashSet<UserVisitBook>(0);
     private Set<Book> books = new HashSet<Book>(0);
     private Set<UserCartBook> userCartBooks = new HashSet<UserCartBook>(0);
     private Set<Category> categories = new HashSet<Category>(0);
     private Set<UserOrder> userOrders = new HashSet<UserOrder>(0);

    public User() {
    }

	
    public User(int userId, String name, Date birthDate, String password, String job, String email, double creditLimit, String address, String phone, String gender) {
        this.userId = userId;
        this.name = name;
        this.birthDate = birthDate;
        this.password = password;
        this.job = job;
        this.email = email;
        this.creditLimit = creditLimit;
        this.address = address;
        this.phone = phone;
        this.gender = gender;
    }
    public User(int userId, String name, Date birthDate, String password, String job, String email, double creditLimit, String address, String phone, String gender, Set<UserVisitBook> userVisitBooks, Set<Book> books, Set<UserCartBook> userCartBooks, Set<Category> categories, Set<UserOrder> userOrders) {
       this.userId = userId;
       this.name = name;
       this.birthDate = birthDate;
       this.password = password;
       this.job = job;
       this.email = email;
       this.creditLimit = creditLimit;
       this.address = address;
       this.phone = phone;
       this.gender = gender;
       this.userVisitBooks = userVisitBooks;
       this.books = books;
       this.userCartBooks = userCartBooks;
       this.categories = categories;
       this.userOrders = userOrders;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="userID", unique=true, nullable=false)
    public int getUserId() {
        return this.userId;
    }
    
    public void setUserId(int userId) {
        this.userId = userId;
    }

    
    @Column(name="name", nullable=false, length=30)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="BirthDate", nullable=false, length=10)
    public Date getBirthDate() {
        return this.birthDate;
    }
    
    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    
    @Column(name="password", nullable=false, length=30)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="job", nullable=false, length=50)
    public String getJob() {
        return this.job;
    }
    
    public void setJob(String job) {
        this.job = job;
    }

    
    @Column(name="email", nullable=false, length=50)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    
    @Column(name="creditLimit", nullable=false, precision=22, scale=0)
    public double getCreditLimit() {
        return this.creditLimit;
    }
    
    public void setCreditLimit(double creditLimit) {
        this.creditLimit = creditLimit;
    }

    
    @Column(name="address", nullable=false, length=100)
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }

    
    @Column(name="phone", nullable=false, length=20)
    public String getPhone() {
        return this.phone;
    }
    
    public void setPhone(String phone) {
        this.phone = phone;
    }

    
    @Column(name="gender", nullable=false, length=20)
    public String getGender() {
        return this.gender;
    }
    
    public void setGender(String gender) {
        this.gender = gender;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<UserVisitBook> getUserVisitBooks() {
        return this.userVisitBooks;
    }
    
    public void setUserVisitBooks(Set<UserVisitBook> userVisitBooks) {
        this.userVisitBooks = userVisitBooks;
    }

@ManyToMany(fetch=FetchType.LAZY, mappedBy="users")
    public Set<Book> getBooks() {
        return this.books;
    }
    
    public void setBooks(Set<Book> books) {
        this.books = books;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<UserCartBook> getUserCartBooks() {
        return this.userCartBooks;
    }
    
    public void setUserCartBooks(Set<UserCartBook> userCartBooks) {
        this.userCartBooks = userCartBooks;
    }

@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="user_category", catalog="bookstoredb", joinColumns = { 
        @JoinColumn(name="userID", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="categoryID", nullable=false, updatable=false) })
    public Set<Category> getCategories() {
        return this.categories;
    }
    
    public void setCategories(Set<Category> categories) {
        this.categories = categories;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<UserOrder> getUserOrders() {
        return this.userOrders;
    }
    
    public void setUserOrders(Set<UserOrder> userOrders) {
        this.userOrders = userOrders;
    }




}


